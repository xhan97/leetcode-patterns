{"version":3,"sources":["components/Shared/Tracking/index.js","components/Navigation/index.js","components/Table/filters.js","data/index.js","components/PatternFrequencies/index.js","components/Table/index.js","components/Tips/index.js","components/Acknowledgements/index.js","components/Tabs/index.js","components/App.js","index.js"],"names":["Event","category","action","label","ReactGA","event","Navigation","_jsx","Navbar","color","light","children","_jsxs","Container","NavbarBrand","onClick","Nav","className","navbar","NavItem","NavLink","target","href","FaGithub","CreateDropDownListHelper","options","filterValue","setFilter","id","value","onChange","e","localStorage","setItem","map","option","idx","concat","DefaultColumnFilter","_ref","_ref$column","column","preFilteredRows","count","length","placeholder","SelectDifficultyColumnFilter","_ref2","_ref2$column","SelectColumnFilter","_ref3","_ref3$column","React","useMemo","set","Set","forEach","row","String","values","split","add","_toConsumableArray","sort","SelectCheckedColumnFilter","_ref4","_ref4$column","filterByCheckbox","val","sortBy","Easy","Medium","Hard","updated","questions","data","i","companyNames","companies","company","name","a","b","difficulty","PatternFrequencies","filters","patternsMap","rows","reduce","acc","original","pattern","Object","create","sortedPatternsByFrequency","keys","showComponent","find","filter","includes","getFrequencyClass","rate","highestFrequency","Math","round","frequencyRate","easy","medium","hard","key","index","Badge","pill","iconPath","process","ProgressBar","total","barClassName","Progress","defaultProps","Table","_useState","useState","_useState2","_slicedToArray","resetCount","setResetCount","checkedList","JSON","parse","getItem","Array","fill","resizedCheckedList","window","stringify","filteredByCheckbox","checkbox","question","difficultyMap","Total","totalDifficultyCount","_useState3","_useState4","setData","_useState5","_useState6","difficultyCount","setDifficultyCount","_useState7","_useState8","checked","setChecked","_useState9","_useState10","showPatterns","setShowPatterns","useEffect","defaultColumn","Filter","minWidth","maxWidth","resetHandler","columns","Header","_React$useState","_React$useState2","resetModal","setResetModal","toggleResetModal","PieChart","title","totalValue","labelPosition","labelStyle","startAngle","lineWidth","background","Button","outline","size","Modal","isOpen","toggle","ModalHeader","ModalFooter","accessor","disableSortBy","Cell","cellInfo","Number","type","q","additive","filteredRows","disableRandomQuestionButton","_Fragment","style","marginBottom","whiteSpace","display","disabled","random","floor","questionSlug","slug","open","FaRandom","premium","FaLock","disableFilters","url","FaExternalLinkAlt","htmlFor","Toggle","defaultChecked","icons","unchecked","patterns","Row","toLowerCase","date","Date","month","toLocaleString","day","getDate","year","getFullYear","FaQuestionCircle","sortType","tooltipText","frequency","src","alt","_useTable","useTable","initialState","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","state","prepareRow","ReactTooltip","ReactTable","_objectSpread","borderless","striped","hover","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","Tips","ReactMarkdown","source","imagePath","Blind","DesignGurus","Hackernoon","Acknowledgements","Col","sm","Card","CardImg","top","width","CardBody","CardTitle","CardSubtitle","Tabs","activeTab","setActiveTab","tab","tabs","classnames","active","TabContent","TabPane","tabId","App","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","trackingID","debug","initialize","pageview","location","pathname","search","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d84423cf.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\n\nconst initGA = (trackingID, options) => {\n  ReactGA.initialize(trackingID, { ...options });\n};\n\nconst PageView = () => {\n  ReactGA.pageview(window.location.pathname + window.location.search);\n};\n\nconst Event = (category, action, label) => {\n  ReactGA.event({\n    category,\n    action,\n    label,\n  });\n};\n\nexport { initGA, PageView, Event };\n","import React from 'react';\nimport {\n  Container,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n} from 'reactstrap';\nimport { FaGithub } from 'react-icons/fa';\nimport { Event } from '../Shared/Tracking';\n\nimport './styles.scss';\n\nconst Navigation = () => {\n  return (\n    <Navbar color=\"light\" light>\n      <Container>\n        <NavbarBrand\n          onClick={() =>\n            Event('Navigation', 'Clicked link', 'Leetcode Patterns link')\n          }\n        >\n          Leetcode Patterns\n        </NavbarBrand>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              target=\"_blank\"\n              href=\"https://github.com/SeanPrashad/leetcode-patterns\"\n              onClick={() => Event('Navigation', 'Clicked link', 'GitHub link')}\n            >\n              <FaGithub />\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nfunction CreateDropDownListHelper(options, filterValue, setFilter, id) {\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        localStorage.setItem(id, e.target.value);\n        setFilter(e.target.value || '');\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, idx) => (\n        <option key={`${idx + option}`} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport function DefaultColumnFilter({\n  // eslint-disable-next-line react/prop-types\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  // eslint-disable-next-line react/prop-types\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || '');\n      }}\n      placeholder={`Search ${count} questions`}\n    />\n  );\n}\n\nexport function SelectDifficultyColumnFilter({\n  column: { filterValue, setFilter, id },\n}) {\n  const options = ['Easy', 'Medium', 'Hard'];\n\n  return CreateDropDownListHelper(options, filterValue, setFilter, id);\n}\n\nexport function SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  const options = React.useMemo(() => {\n    const set = new Set();\n\n    preFilteredRows.forEach(row => {\n      const values = String(row.values[id]).split(',');\n\n      values.forEach(value => {\n        set.add(value);\n      });\n    });\n\n    return [...set.values()].sort();\n  }, [id, preFilteredRows]);\n\n  return CreateDropDownListHelper(options, filterValue, setFilter, id);\n}\n\nexport function SelectCheckedColumnFilter({\n  column: { filterValue, setFilter, id, filterByCheckbox },\n}) {\n  const options = ['Checked', 'Unchecked'];\n  const filter = val => {\n    setFilter(val);\n    filterByCheckbox();\n  };\n\n  return CreateDropDownListHelper(options, filterValue, filter, id);\n}\n","import questions from './questions.json';\n\nconst sortBy = { Easy: 0, Medium: 1, Hard: 2 };\nconst { updated, data } = questions;\n\nfor (let i = 0; i < data.length; i += 1) {\n  data[i].companyNames = data[i].companies.map(company => company.name);\n}\n\nexport { updated };\nexport default data.sort((a, b) => sortBy[a.difficulty] - sortBy[b.difficulty]);\n","import { Badge } from 'reactstrap';\nimport React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\nimport './styles.scss';\n\nconst PatternFrequencies = ({ filters, rows }) => {\n  const patternsMap = rows.reduce((acc, row) => {\n    for (let i = 0; i < row.original.pattern.length; i += 1) {\n      const pattern = row.original.pattern[i];\n      acc[pattern] = acc[pattern] + 1 || 1;\n    }\n    return acc;\n  }, Object.create(null));\n  const sortedPatternsByFrequency = Object.keys(patternsMap).sort(\n    (a, b) => patternsMap[b] - patternsMap[a],\n  );\n  const showComponent = filters.find(filter =>\n    ['companies', 'difficulty'].includes(filter.id),\n  );\n\n  const getFrequencyClass = rate => {\n    const highestFrequency = Math.round(\n      patternsMap[sortedPatternsByFrequency[0]],\n    );\n\n    if (highestFrequency / 3 < 1) {\n      return '';\n    }\n\n    const frequencyRate = {\n      easy: Math.round(highestFrequency / 3),\n      medium: Math.round((highestFrequency / 3) * 2),\n      hard: highestFrequency,\n    };\n\n    return Object.keys(frequencyRate).find(key => rate <= frequencyRate[key]);\n  };\n\n  return showComponent ? (\n    <div className=\"pattern-count\">\n      <h5>Problems pattern frequency</h5>\n      {sortedPatternsByFrequency.map((pattern, index) => (\n        <Badge\n          // eslint-disable-next-line react/no-array-index-key\n          key={pattern + index}\n          className={`${getFrequencyClass(patternsMap[pattern])}`}\n          pill\n        >\n          <span\n            data-tip={`${patternsMap[pattern]} \"${pattern}\" related problems`}\n          >\n            {pattern} : {patternsMap[pattern]}\n          </span>\n        </Badge>\n      ))}\n    </div>\n  ) : null;\n};\n\nPatternFrequencies.propTypes = {\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string, value: PropTypes.string }),\n  ).isRequired,\n  rows: PropTypes.arrayOf(\n    PropTypes.shape({\n      original: PropTypes.shape({\n        pattern: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n  ).isRequired,\n};\n\nexport default PatternFrequencies;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Table as ReactTable,\n  Container,\n  Row,\n  Badge,\n  Progress,\n  NavLink,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n} from 'reactstrap';\nimport Toggle from 'react-toggle';\nimport ReactTooltip from 'react-tooltip';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { useTable, useFilters, useSortBy } from 'react-table';\nimport {\n  FaLock,\n  FaExternalLinkAlt,\n  FaRandom,\n  FaQuestionCircle,\n} from 'react-icons/fa';\nimport {\n  DefaultColumnFilter,\n  SelectDifficultyColumnFilter,\n  SelectColumnFilter,\n  SelectCheckedColumnFilter,\n} from './filters';\nimport { Event } from '../Shared/Tracking';\n\nimport questions, { updated } from '../../data';\n\nimport 'react-toggle/style.css';\nimport './styles.scss';\nimport PatternFrequencies from '../PatternFrequencies';\n\nconst iconPath = `${process.env.PUBLIC_URL}/static/icons/`;\n\nconst Table = () => {\n  const [resetCount, setResetCount] = useState(0);\n  let checkedList =\n    JSON.parse(localStorage.getItem('checked')) ||\n    new Array(questions.length).fill(false);\n\n  /* If the user has previously visited the website, then an array in\n  LocalStorage would exist of a certain length which corresponds to which\n  questions they have/have not completed. In the event that we add new questions\n  to the list, then we would need to resize and copy the existing 'checked'\n  array before updating it in LocalStorage in order to transfer their saved\n  progress. */\n  if (checkedList.length !== questions.length) {\n    const resizedCheckedList = new Array(questions.length).fill(false);\n\n    for (let i = 0; i < checkedList.length; i += 1) {\n      resizedCheckedList[i] = checkedList[i];\n    }\n\n    checkedList = resizedCheckedList;\n    window.localStorage.setItem('checked', JSON.stringify(checkedList));\n  }\n\n  const filteredByCheckbox = () => {\n    const checkbox = localStorage.getItem('checkbox') || '';\n    return questions.filter(question => {\n      if (!checkbox) return true;\n      return question.checkbox === checkbox;\n    });\n  };\n\n  for (let i = 0; i < questions.length; i += 1) {\n    if (checkedList[questions[i].id]) {\n      questions[i].checkbox = 'Checked';\n    } else {\n      questions[i].checkbox = 'Unchecked';\n    }\n  }\n\n  const difficultyMap = { Easy: 0, Medium: 0, Hard: 0, Total: 0 };\n  const totalDifficultyCount = {\n    Easy: 0,\n    Medium: 0,\n    Hard: 0,\n    Total: questions.length,\n  };\n  for (let i = 0; i < questions.length; i += 1) {\n    difficultyMap[questions[i].difficulty] += checkedList[questions[i].id];\n    difficultyMap.Total += checkedList[questions[i].id];\n    totalDifficultyCount[questions[i].difficulty] += 1;\n  }\n\n  const [data, setData] = useState(filteredByCheckbox());\n  const [difficultyCount, setDifficultyCount] = useState(difficultyMap);\n  const [checked, setChecked] = useState(checkedList);\n  const [showPatterns, setShowPatterns] = useState(\n    JSON.parse(localStorage.getItem('showPatterns')) || new Array(1).fill(true),\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem('checked', JSON.stringify(checked));\n  }, [checked]);\n\n  useEffect(() => {\n    window.localStorage.setItem('showPatterns', JSON.stringify(showPatterns));\n  }, [showPatterns]);\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n      minWidth: 30,\n      maxWidth: 30,\n    }),\n    [],\n  );\n\n  const resetHandler = () => {\n    setChecked(new Array(checked.length).fill(false));\n    setDifficultyCount(() => {\n      return { Easy: 0, Medium: 0, Hard: 0, Total: 0 };\n    });\n    const count = resetCount + 1;\n    setResetCount(count);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Leetcode Patterns',\n        columns: [\n          {\n            Header: () => {\n              const [resetModal, setResetModal] = React.useState(false);\n              const toggleResetModal = () => {\n                setResetModal(!resetModal);\n              };\n\n              return (\n                <span className=\"d-flex flex-column justify-content-between\">\n                  <PieChart\n                    data={[\n                      {\n                        title: 'One',\n                        value: difficultyCount.Total,\n                        color: '#ffa929',\n                      },\n                    ]}\n                    totalValue={totalDifficultyCount.Total}\n                    label={() =>\n                      `${difficultyCount.Total} /\n                      ${totalDifficultyCount.Total}`\n                    }\n                    labelPosition={0}\n                    labelStyle={{\n                      // Needed for Dark Reader to work\n                      fill: 'black',\n                    }}\n                    startAngle={-90}\n                    lineWidth={12}\n                    className=\"progress-pie\"\n                    background=\"#e9ecef\"\n                  />\n                  <Button\n                    className=\"reset-button\"\n                    outline\n                    size=\"sm\"\n                    color=\"danger\"\n                    onClick={toggleResetModal}\n                  >\n                    Reset\n                  </Button>\n                  <Modal isOpen={resetModal} toggle={toggleResetModal}>\n                    <ModalHeader toggle={toggleResetModal}>\n                      Are you sure you want to reset your progress?\n                    </ModalHeader>\n                    <ModalFooter>\n                      <Button onClick={resetHandler} color=\"success\">\n                        Reset\n                      </Button>\n                      <Button onClick={toggleResetModal}>Cancel</Button>\n                    </ModalFooter>\n                  </Modal>\n                </span>\n              );\n            },\n            accessor: 'checkbox',\n            id: 'checkbox',\n            filterByCheckbox: () => {\n              setData(filteredByCheckbox());\n            },\n            disableSortBy: true,\n            Cell: cellInfo => {\n              return (\n                <span data-tip={`Question #${Number(cellInfo.row.id) + 1}`}>\n                  <input\n                    type=\"checkbox\"\n                    checked={checked[cellInfo.row.original.id]}\n                    onChange={() => {\n                      checked[cellInfo.row.original.id] = !checked[\n                        cellInfo.row.original.id\n                      ];\n                      const question = questions.find(\n                        q => q.id === cellInfo.row.original.id,\n                      );\n                      if (checked[cellInfo.row.original.id]) {\n                        question.checkbox = 'Checked';\n                      } else {\n                        question.checkbox = 'Unchecked';\n                      }\n                      const additive = checked[cellInfo.row.original.id]\n                        ? 1\n                        : -1;\n                      difficultyCount[\n                        cellInfo.row.original.difficulty\n                      ] += additive;\n                      difficultyCount.Total += additive;\n                      setDifficultyCount(difficultyCount);\n                      setChecked([...checked]);\n                      setData(filteredByCheckbox());\n                    }}\n                  />\n                </span>\n              );\n            },\n            Filter: SelectCheckedColumnFilter,\n          },\n          {\n            /* eslint-disable react/prop-types */\n            Header: ({ filteredRows }) => {\n              const disableRandomQuestionButton = filteredRows.length === 0;\n\n              const randomQuestion = () => {\n                const random = Math.floor(Math.random() * filteredRows.length);\n                const randomFilteredRow = filteredRows[random];\n                const questionSlug = randomFilteredRow.original.slug;\n                /* eslint-enable react/prop-types */\n\n                window.open(\n                  `https://leetcode.com/problems/${questionSlug}/`,\n                  '_blank',\n                );\n              };\n              return (\n                <>\n                  <div id=\"difficultyProgress\">\n                    <ProgressBar\n                      style={{ marginBottom: 10 }}\n                      name=\"Easy\"\n                      value={difficultyCount.Easy}\n                      total={totalDifficultyCount.Easy}\n                      barClassName=\"easy\"\n                    />\n                    <ProgressBar\n                      name=\"Medium\"\n                      value={difficultyCount.Medium}\n                      total={totalDifficultyCount.Medium}\n                      barClassName=\"medium\"\n                    />\n                    <ProgressBar\n                      name=\"Hard\"\n                      value={difficultyCount.Hard}\n                      total={totalDifficultyCount.Hard}\n                      barClassName=\"hard\"\n                    />\n                  </div>\n                  <div\n                    style={{ whiteSpace: 'nowrap', display: 'inline-block' }}\n                  >\n                    Questions{' '}\n                    <Button\n                      disabled={disableRandomQuestionButton}\n                      onClick={randomQuestion}\n                      color=\"dark\"\n                      id=\"random-question-button\"\n                      size=\"sm\"\n                    >\n                      <span data-tip=\"Try a random question!\">\n                        <FaRandom />\n                      </span>\n                    </Button>\n                  </div>\n                </>\n              );\n            },\n            accessor: 'questions',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              return (\n                <NavLink\n                  target=\"_blank\"\n                  href={`https://leetcode.com/problems/${cellInfo.row.original.slug}/`}\n                  onClick={() => {\n                    Event(\n                      'Table',\n                      'Clicked question title',\n                      `${cellInfo.row.original.title} question title`,\n                    );\n                  }}\n                >\n                  {cellInfo.row.original.premium ? (\n                    <span data-tip=\"Requires leetcode premium to view\">\n                      <FaLock />{' '}\n                    </span>\n                  ) : (\n                    ''\n                  )}\n                  {cellInfo.row.original.title}\n                </NavLink>\n              );\n            },\n            disableFilters: true,\n          },\n          {\n            Header: 'Solutions',\n            accessor: 'solutions',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              const url = `https://leetcode.com/problems/${cellInfo.row.original.slug}/`;\n              return (\n                <NavLink\n                  target=\"_blank\"\n                  href={`${url}discuss/?currentPage=1&orderBy=most_votes`}\n                  onClick={() => {\n                    Event(\n                      'Table',\n                      'Clicked solution',\n                      `${cellInfo.row.original.slug} solution`,\n                    );\n                  }}\n                >\n                  <FaExternalLinkAlt />\n                </NavLink>\n              );\n            },\n            disableFilters: true,\n          },\n          {\n            Header: () => {\n              return (\n                // eslint-disable-next-line\n                // eslint-disable-next-line jsx-a11y/label-has-associated-control\n                <label htmlFor=\"pattern-toggle\">\n                  <span>Show/Hide Patterns </span>\n                  <Toggle\n                    id=\"pattern-toggle\"\n                    defaultChecked={showPatterns[0]}\n                    icons={{\n                      checked: null,\n                      unchecked: null,\n                    }}\n                    onChange={() => {\n                      showPatterns[0] = !showPatterns[0];\n                      setShowPatterns([...showPatterns]);\n                    }}\n                  />\n                </label>\n              );\n            },\n            accessor: 'pattern',\n            disableSortBy: true,\n            id: 'pattern',\n            Cell: cellInfo => {\n              const patterns = `${cellInfo.row.original.pattern}`\n                .split(',')\n                .map(pattern => {\n                  if (showPatterns[0] || checked[cellInfo.row.original.id]) {\n                    return (\n                      <Badge key={pattern} pill>\n                        {pattern}\n                      </Badge>\n                    );\n                  }\n\n                  return (\n                    <Badge key={pattern} pill>\n                      ***\n                    </Badge>\n                  );\n                });\n\n              return <Row className=\"patterns\">{patterns}</Row>;\n            },\n\n            Filter: SelectColumnFilter,\n          },\n          {\n            Header: 'Difficulty',\n            accessor: 'difficulty',\n            id: 'difficulty',\n            disableSortBy: true,\n            Cell: cellInfo => (\n              <Row>\n                <Badge\n                  className={cellInfo.row.original.difficulty.toLowerCase()}\n                  pill\n                >\n                  {cellInfo.row.original.difficulty}\n                </Badge>\n              </Row>\n            ),\n            Filter: SelectDifficultyColumnFilter,\n          },\n          {\n            Header: () => {\n              const date = new Date(updated);\n              const month = date.toLocaleString('default', {\n                month: 'long',\n              });\n              const day = date.getDate();\n              const year = date.getFullYear();\n              return (\n                <>\n                  <div\n                    style={{ whiteSpace: 'nowrap', display: 'inline-block' }}\n                  >\n                    Companies{' '}\n                    <span\n                      data-tip={`Companies that have asked these questions in the past year; retrieved from Leetcode Premium on ${month} ${day}, ${year} - thanks to @leo-step!`}\n                    >\n                      <FaQuestionCircle />\n                    </span>\n                  </div>\n                </>\n              );\n            },\n            accessor: 'companyNames',\n            sortType: (a, b) => {\n              if (a.original.companies.length === b.original.companies.length) {\n                return 0;\n              }\n              return a.original.companies.length > b.original.companies.length\n                ? 1\n                : -1;\n            },\n            Cell: cellInfo => {\n              const questionSlug = cellInfo.row.original.slug;\n              const companies = cellInfo.row.original.companies.map(company => {\n                const tooltipText = `Asked by ${company.name} ${company.frequency} times`;\n                return (\n                  <img\n                    key={`${questionSlug}-${company.name}`}\n                    src={`${iconPath}${company.slug}.png`}\n                    alt={company.name}\n                    data-tip={tooltipText}\n                  />\n                );\n              });\n\n              return <Row className=\"companies\">{companies}</Row>;\n            },\n            Filter: SelectColumnFilter,\n          },\n        ],\n      },\n    ],\n    // eslint-disable-next-line\n    [resetCount],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    filteredRows,\n    state: { filters },\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: {\n        filters: [\n          {\n            id: 'checkbox',\n            value: localStorage.getItem('checkbox') || '',\n          },\n          {\n            id: 'difficulty',\n            value: localStorage.getItem('difficulty') || '',\n          },\n          {\n            id: 'pattern',\n            value: localStorage.getItem('pattern') || '',\n          },\n          {\n            id: 'companyNames',\n            value: localStorage.getItem('companyNames') || '',\n          },\n        ],\n      },\n    },\n    useFilters,\n    useSortBy,\n  );\n\n  return (\n    <Container className=\"table\">\n      <ReactTooltip />\n      <PatternFrequencies filters={filters} rows={filteredRows} />\n      <ReactTable borderless striped hover {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  <div {...column.getSortByToggleProps({ title: null })}>\n                    {column.render('Header')}\n                    {/* eslint-disable-next-line no-nested-ternary */}\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' 🔽'\n                        : ' 🔼'\n                      : ''}\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </ReactTable>\n    </Container>\n  );\n};\n\nconst ProgressBar = ({ name, value, total, className, barClassName }) => {\n  return (\n    <div>\n      <div className=\"d-flex justify-content-between\">\n        <div>{name}</div>\n        <div>\n          {value}/{total}\n        </div>\n      </div>\n      <Progress\n        className={className}\n        barClassName={barClassName}\n        value={(value / total) * 100}\n      />\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  className: PropTypes.string,\n  barClassName: PropTypes.string,\n};\n\nProgressBar.defaultProps = {\n  className: 'progress-bar-sm',\n  barClassName: null,\n};\n\nexport default Table;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport './styles.scss';\n\nconst Tips = () => {\n  const input = `\n  \\`\\`\\`md\nIf input array is sorted then\n- Binary search\n- Two pointers\n\nIf asked for all permutations/subsets then\n- Backtracking\n\nIf given a tree then\n- DFS\n- BFS\n\nIf given a graph then\n- DFS\n- BFS\n\nIf given a linked list then\n- Two pointers\n\nIf recursion is banned then\n- Stack\n\nIf must solve in-place then\n- Swap corresponding values\n- Store one or more different values in the same pointer\n\nIf asked for maximum/minimum subarray/subset/options then\n- Dynamic programming\n\nIf asked for top/least K items then\n- Heap\n- QuickSelect\n\nIf asked for common strings then\n- Map\n- Trie\n\nElse\n- Map/Set for O(1) time & O(n) space\n- Sort input for O(nlogn) time and O(1) space\n\\`\\`\\``;\n\n  return <ReactMarkdown className=\"tips\" source={input} />;\n};\n\nexport default Tips;\n","import React from 'react';\nimport {\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  NavLink,\n  Row,\n  Col,\n  Container,\n} from 'reactstrap';\nimport { Event } from '../Shared/Tracking';\n\nimport './styles.scss';\n\nconst imagePath = `${process.env.PUBLIC_URL}/static/images/`;\nconst Blind = `${imagePath}Blind.png`;\nconst DesignGurus = `${imagePath}DesignGurus.png`;\nconst Hackernoon = `${imagePath}Hackernoon.png`;\n\nconst Acknowledgements = () => {\n  return (\n    <Container className=\"acknowledgements\">\n      <Row>\n        <h1>\n          The following sources were used in aggregating this question list:\n        </h1>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Blind} alt=\"Blind 75 Question\" />\n            <CardBody>\n              <CardTitle>Blind Curated 75 Question List</CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\"\n                  onClick={() => {\n                    Event('Acknowledgements', 'Clicked URL', 'Blind 75 url');\n                  }}\n                >\n                  https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={DesignGurus} alt=\"DesignGurus.io\" />\n            <CardBody>\n              <CardTitle>\n                Grokking the Coding Interview: Patterns for Coding Questions\n              </CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://www.designgurus.io/course/grokking-the-coding-interview\"\n                  onClick={() => {\n                    Event(\n                      'Acknowledgements',\n                      'Clicked URL',\n                      'DesignGurus.io url',\n                    );\n                  }}\n                >\n                  https://www.designgurus.io/course/grokking-the-coding-interview\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Hackernoon} alt=\"Hackernoon\" />\n            <CardBody>\n              <CardTitle>\n                14 Patterns to Ace Any Coding Interview Question\n              </CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\"\n                  onClick={() => {\n                    Event('Acknowledgements', 'Clicked URL', 'Hackernoon url');\n                  }}\n                >\n                  https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Acknowledgements;\n","import React, { useState } from 'react';\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport { Event } from '../Shared/Tracking';\n\nimport Table from '../Table';\nimport Tips from '../Tips';\nimport Acknowledgements from '../Acknowledgements';\n\nimport './styles.scss';\n\nconst Tabs = () => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  return (\n    <Container>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '1' })}\n            onClick={() => {\n              toggle('1');\n              Event('Tabs', 'Clicked Tab', 'Question List tab');\n            }}\n          >\n            Question List\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '2' })}\n            onClick={() => {\n              toggle('2');\n              Event('Tabs', 'Clicked Tab', 'Tips tab');\n            }}\n          >\n            Tips\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '3' })}\n            onClick={() => {\n              toggle('3');\n              Event('Tabs', 'Clicked Tab', 'Acknowledgements tab');\n            }}\n          >\n            Acknowledgements\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Table />\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Tips />\n        </TabPane>\n        <TabPane tabId=\"3\">\n          <Acknowledgements />\n        </TabPane>\n      </TabContent>\n    </Container>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\n\nimport './styles.scss';\n\nimport Navigation from './Navigation';\nimport Tabs from './Tabs';\n\nimport { initGA, PageView } from './Shared/Tracking';\n\nclass App extends React.Component {\n  componentDidMount() {\n    initGA('G-GKMJ4KP806', { debug: false });\n    PageView();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Tabs />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}